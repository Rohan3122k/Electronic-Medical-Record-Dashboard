# -*- coding: utf-8 -*-
"""streamlit_app

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QrNi9hrFriBAa0K9HqExEnBMPPs-412m
"""

import streamlit as st
import pandas as pd
import numpy as np
import joblib
from datetime import datetime

# 1. Load your artifacts
model = joblib.load('no_show_model.pkl')
ne_map = joblib.load('neighborhood_encoder.pkl')

# 2. Page config
st.set_page_config(page_title="No-Show Risk Predictor", layout="centered")
st.title("🏥 EMR No-Show Risk Predictor")

# 3. Input form
with st.form("appointment_form"):
    st.header("Appointment Details")

    patient_id = st.text_input("Patient ID", value="12345")

    col1, col2 = st.columns(2)
    with col1:
        appt_day  = st.date_input("Appointment Date", value=datetime.today())
        appt_time = st.time_input("Appointment Time", value=datetime.now().time())
    with col2:
        sched_day  = st.date_input("Scheduled On", value=datetime.today())
        sched_time = st.time_input("Scheduled Time", value=datetime.now().time())

    age          = st.number_input("Age", min_value=0, max_value=120, value=45)
    gender       = st.selectbox("Gender", ["M", "F"])
    neighborhood = st.text_input("Neighbourhood", value="Unknown")

    st.markdown("**Clinical Flags**")
    scholarship  = st.checkbox("Scholarship")
    hipertension = st.checkbox("Hypertension")
    diabetes     = st.checkbox("Diabetes")
    alcoholism   = st.checkbox("Alcoholism")
    handicap     = st.checkbox("Handicap")
    sms_received = st.checkbox("SMS Received", value=True)

    submitted = st.form_submit_button("Predict No-Show Risk")

if submitted:
    # 4. Feature engineering on inputs
    appointment_dt = datetime.combine(appt_day, appt_time)
    scheduled_dt   = datetime.combine(sched_day, sched_time)
    date_diff      = (appointment_dt - scheduled_dt).days

    # 4a. Lead-time bucket with open-ended bins
    bins   = [-np.inf, 0, 7, 14, 30, np.inf]
    labels = ['Same Day', '1–7 days', '8–14 days', '15–30 days', '>30 days']
    lt_bucket = pd.cut(
        [date_diff],
        bins=bins,
        labels=labels,
        include_lowest=True,
        right=True
    )[0]

    # 4b. Safe index lookup—defaults to last bucket if NaN
    if pd.isna(lt_bucket):
        lt_idx = len(labels) - 1
    else:
        lt_idx = labels.index(lt_bucket)

    # 4c. Other time features
    weekday = appointment_dt.strftime("%A")
    month   = appointment_dt.month

    # 4d. Neighborhood target‐encoding (default to 0.5 if missing)
    neigh_te = ne_map.get(neighborhood, 0.5)

    # 4e. Build feature vector (order must match training)
    feats = [
        age,
        int(scholarship),
        int(hipertension),
        int(diabetes),
        int(alcoholism),
        int(handicap),
        int(sms_received),
        lt_idx,
        ['Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Sunday'].index(weekday),
        month,
        1 if gender == "M" else 0,
        neigh_te
    ]

    # 5. Predict No-Show probability (class 0)
    prob_ns = model.predict_proba([feats])[0][0]

    # 6. Display
    st.metric("Predicted No-Show Probability", f"{prob_ns*100:.2f}%")

    # 7. Apply tuned threshold = 0.21
    threshold = 0.21
    if prob_ns >= threshold:
        st.warning("⚠️ High no-show risk—consider sending an extra reminder!")
    else:
        st.success("✅ Low no-show risk!")